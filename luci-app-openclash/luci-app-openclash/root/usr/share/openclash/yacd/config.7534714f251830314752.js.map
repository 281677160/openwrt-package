{"version":3,"sources":["webpack://yacd/./src/components/Config.module.css?b1fa","webpack://yacd/./src/components/Selection.module.css?bfce","webpack://yacd/./src/components/Selection.tsx","webpack://yacd/./src/components/TrafficChartSample.tsx","webpack://yacd/./src/components/Config.tsx"],"names":["Selection2","OptionComponent","optionPropsList","selectedIndex","onChange","inputCx","cx","s","onInputChange","e","target","value","className","map","props","idx","type","checked","name","aria-labelledby","extraChartOptions","legend","display","scales","xAxes","yAxes","data1","data2","labels","TrafficChart","id","Chart","chartJSResource","data","useMemo","datasets","commonDataSetProps","chartStyles","up","down","eleId","useLineChart","style","width","padding","useEffect","React","useState","useCallback","useRef","propsList","optionsRule","label","optionsLogLevel","portFields","key","Config","connect","selectedChartStyleIndex","getSelectedChartStyleIndex","latencyTestUrl","getLatencyTestUrl","apiConfig","getClashAPIConfig","dispatch","configs","configState","setConfigStateInternal","refConfigs","current","openAPIConfigModal","openModal","setConfigState","val","handleSwitchOnChange","updateConfigs","handleInputOnChange","num","parseInt","useStoreActions","selectChartStyleIndex","updateAppConfig","handleInputOnBlur","Error","mode","m","toUpperCase","slice","ContentHeader","title","s0","f","undefined","Input","onBlur","ToggleSwitch","options","TrafficChartSample","maxWidth","Button","onClick","getConfigs","fetchConfigs","propTypes","PropTypes"],"mappings":"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","file":"config.7534714f251830314752.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"_2drigWG08z\",\"section\":\"_3qy5-MPwaw\",\"sep\":\"_1sbDIR8sCY\",\"label\":\"_1Hvw0QbyvH\"};","// extracted by mini-css-extract-plugin\nexport default {\"fieldset\":\"_1-_dHqCZpQ\",\"input\":\"_3r9QGmDKef\",\"cnt\":\"_3iVnjLFlaM\"};","import cx from 'clsx';\nimport React from 'react';\n\nimport s from './Selection.module.css';\n\ntype SelectionProps = {\n  OptionComponent?: (...args: any[]) => any;\n  optionPropsList?: any[];\n  selectedIndex?: number;\n  onChange?: (...args: any[]) => any;\n};\n\nexport function Selection2({\n  OptionComponent,\n  optionPropsList,\n  selectedIndex,\n  onChange,\n}: SelectionProps) {\n  const inputCx = cx('visually-hidden', s.input);\n  const onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(e.target.value);\n  };\n  return (\n    <fieldset className={s.fieldset}>\n      {optionPropsList.map((props, idx) => {\n        return (\n          <label key={idx}>\n            <input\n              type=\"radio\"\n              checked={selectedIndex === idx}\n              name=\"selection\"\n              value={idx}\n              aria-labelledby={'traffic chart type ' + idx}\n              onChange={onInputChange}\n              className={inputCx}\n            />\n            <div className={s.cnt}>\n              <OptionComponent {...props} />\n            </div>\n          </label>\n        );\n      })}\n    </fieldset>\n  );\n}\n\n// for test\n// @ts-expect-error ts-migrate(7030) FIXME: Not all code paths return a value.\nexport function Option({ title }) {\n  // eslint-disable-next-line no-undef\n  if (__DEV__) {\n    return (\n      <div\n        style={{\n          width: 100,\n          height: 60,\n          backgroundColor: '#eee',\n        }}\n      >\n        {title}\n      </div>\n    );\n  }\n}\n","import React, { useMemo } from 'react';\n\nimport useLineChart from '../hooks/useLineChart';\nimport {\n  chartJSResource,\n  chartStyles,\n  commonDataSetProps,\n} from '../misc/chart';\n\nconst extraChartOptions = {\n  legend: {\n    display: false,\n  },\n  scales: {\n    xAxes: [{ display: false }],\n    yAxes: [{ display: false }],\n  },\n};\n\nconst data1 = [23e3, 35e3, 46e3, 33e3, 90e3, 68e3, 23e3, 45e3];\nconst data2 = [184e3, 183e3, 196e3, 182e3, 190e3, 186e3, 182e3, 189e3];\nconst labels = data1;\n\nexport default function TrafficChart({ id }) {\n  const Chart = chartJSResource.read();\n\n  const data = useMemo(\n    () => ({\n      labels,\n      datasets: [\n        {\n          ...commonDataSetProps,\n          ...chartStyles[id].up,\n          data: data1,\n        },\n        {\n          ...commonDataSetProps,\n          ...chartStyles[id].down,\n          data: data2,\n        },\n      ],\n    }),\n    [id]\n  );\n\n  const eleId = 'chart-' + id;\n  useLineChart(Chart, eleId, data, null, extraChartOptions);\n\n  return (\n    <div\n      style={{\n        width: 130,\n        padding: 5,\n      }}\n    >\n      <canvas id={eleId} />\n    </div>\n  );\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {\n  getClashAPIConfig,\n  getLatencyTestUrl,\n  getSelectedChartStyleIndex,\n} from '../store/app';\nimport { fetchConfigs, getConfigs, updateConfigs } from '../store/configs';\nimport { openModal } from '../store/modals';\nimport Button from './Button';\nimport s0 from './Config.module.css';\nimport ContentHeader from './ContentHeader';\nimport Input, { SelfControlledInput } from './Input';\nimport { Selection2 } from './Selection';\nimport { connect, useStoreActions } from './StateProvider';\nimport Switch from './SwitchThemed';\nimport ToggleSwitch from './ToggleSwitch';\nimport TrafficChartSample from './TrafficChartSample';\n\nconst { useEffect, useState, useCallback, useRef, useMemo } = React;\n\nconst propsList = [{ id: 0 }, { id: 1 }, { id: 2 }, { id: 3 }];\n\nconst optionsRule = [\n  {\n    label: 'Global',\n    value: 'Global',\n  },\n  {\n    label: 'Rule',\n    value: 'Rule',\n  },\n  {\n    label: 'Direct',\n    value: 'Direct',\n  },\n];\n\nconst optionsLogLevel = [\n  {\n    label: 'Debug',\n    value: 'debug',\n  },\n  {\n    label: 'Warning',\n    value: 'warning',\n  },\n  {\n    label: 'Info',\n    value: 'info',\n  },\n  {\n    label: 'Error',\n    value: 'error',\n  },\n  {\n    label: 'Silent',\n    value: 'silent',\n  },\n];\n\nconst portFields = [\n  { key: 'port', label: 'HTTP Proxy Port' },\n  { key: 'socks-port', label: 'SOCKS5 Proxy Port' },\n  { key: 'mixed-port', label: 'Mixed Port' },\n  { key: 'redir-port', label: 'Redir Port' },\n];\n\nconst mapState = (s) => ({\n  configs: getConfigs(s),\n  apiConfig: getClashAPIConfig(s),\n});\n\nconst mapState2 = (s) => ({\n  selectedChartStyleIndex: getSelectedChartStyleIndex(s),\n  latencyTestUrl: getLatencyTestUrl(s),\n  apiConfig: getClashAPIConfig(s),\n});\n\nconst Config = connect(mapState2)(ConfigImpl);\nexport default connect(mapState)(ConfigContainer);\n\nfunction ConfigContainer({ dispatch, configs, apiConfig }) {\n  useEffect(() => {\n    dispatch(fetchConfigs(apiConfig));\n  }, [dispatch, apiConfig]);\n  return <Config configs={configs} />;\n}\n\nfunction ConfigImpl({\n  dispatch,\n  configs,\n  selectedChartStyleIndex,\n  latencyTestUrl,\n  apiConfig,\n}) {\n  const [configState, setConfigStateInternal] = useState(configs);\n  const refConfigs = useRef(configs);\n  useEffect(() => {\n    if (refConfigs.current !== configs) {\n      setConfigStateInternal(configs);\n    }\n    refConfigs.current = configs;\n  }, [configs]);\n\n  const openAPIConfigModal = useCallback(() => {\n    dispatch(openModal('apiConfig'));\n  }, [dispatch]);\n\n  const setConfigState = useCallback(\n    (name, val) => {\n      setConfigStateInternal({\n        ...configState,\n        [name]: val,\n      });\n    },\n    [configState]\n  );\n\n  const handleSwitchOnChange = useCallback(\n    (checked: boolean) => {\n      const name = 'allow-lan';\n      const value = checked;\n      setConfigState(name, value);\n      dispatch(updateConfigs(apiConfig, { 'allow-lan': value }));\n    },\n    [apiConfig, dispatch, setConfigState]\n  );\n\n  const handleInputOnChange = useCallback(\n    (e) => {\n      const target = e.target;\n      const { name } = target;\n      const { value } = target;\n      switch (target.name) {\n        case 'mode':\n        case 'log-level':\n          setConfigState(name, value);\n          dispatch(updateConfigs(apiConfig, { [name]: value }));\n          break;\n        case 'redir-port':\n        case 'socks-port':\n        case 'mixed-port':\n        case 'port':\n          if (target.value !== '') {\n            const num = parseInt(target.value, 10);\n            if (num < 0 || num > 65535) return;\n          }\n          setConfigState(name, value);\n          break;\n        default:\n          return;\n      }\n    },\n    [apiConfig, dispatch, setConfigState]\n  );\n\n  const { selectChartStyleIndex, updateAppConfig } = useStoreActions();\n\n  const handleInputOnBlur = useCallback(\n    (e) => {\n      const target = e.target;\n      const { name, value } = target;\n      switch (name) {\n        case 'port':\n        case 'socks-port':\n        case 'mixed-port':\n        case 'redir-port': {\n          const num = parseInt(value, 10);\n          if (num < 0 || num > 65535) return;\n          dispatch(updateConfigs(apiConfig, { [name]: num }));\n          break;\n        }\n        case 'latencyTestUrl': {\n          updateAppConfig(name, value);\n          break;\n        }\n        default:\n          throw new Error(`unknown input name ${name}`);\n      }\n    },\n    [apiConfig, dispatch, updateAppConfig]\n  );\n\n  const mode = useMemo(() => {\n    const m = configState.mode;\n    return typeof m === 'string' && m[0].toUpperCase() + m.slice(1);\n  }, [configState.mode]);\n\n  return (\n    <div>\n      <ContentHeader title=\"Config\" />\n      <div className={s0.root}>\n        {portFields.map((f) =>\n          configState[f.key] !== undefined ? (\n            <div key={f.key}>\n              <div className={s0.label}>{f.label}</div>\n              <Input\n                name={f.key}\n                value={configState[f.key]}\n                onChange={handleInputOnChange}\n                // @ts-expect-error ts-migrate(2322) FIXME: Type '{ name: string; value: any; onChange: (e: an... Remove this comment to see the full error message\n                onBlur={handleInputOnBlur}\n              />\n            </div>\n          ) : null\n        )}\n        <div>\n          <div className={s0.label}>Allow LAN</div>\n          <Switch\n            name=\"allow-lan\"\n            checked={configState['allow-lan']}\n            onChange={handleSwitchOnChange}\n          />\n        </div>\n\n        <div>\n          <div className={s0.label}>Mode</div>\n          <ToggleSwitch\n            options={optionsRule}\n            name=\"mode\"\n            value={mode}\n            onChange={handleInputOnChange}\n          />\n        </div>\n\n        <div>\n          <div className={s0.label}>Log Level</div>\n          <ToggleSwitch\n            options={optionsLogLevel}\n            name=\"log-level\"\n            value={configState['log-level']}\n            onChange={handleInputOnChange}\n          />\n        </div>\n      </div>\n\n      <div className={s0.sep}>\n        <div />\n      </div>\n\n      <div className={s0.section}>\n        <div>\n          <div className={s0.label}>Chart Style</div>\n          <Selection2\n            OptionComponent={TrafficChartSample}\n            optionPropsList={propsList}\n            selectedIndex={selectedChartStyleIndex}\n            onChange={selectChartStyleIndex}\n          />\n        </div>\n        <div style={{ maxWidth: 360 }}>\n          <div className={s0.label}>Latency Test URL</div>\n          <SelfControlledInput\n            name=\"latencyTestUrl\"\n            type=\"text\"\n            value={latencyTestUrl}\n            onBlur={handleInputOnBlur}\n          />\n        </div>\n        <div>\n          <div className={s0.label}>Action</div>\n          <Button label=\"Switch backend\" onClick={openAPIConfigModal} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// @ts-expect-error ts-migrate(2339) FIXME: Property 'propTypes' does not exist on type '(prop... Remove this comment to see the full error message\nConfig.propTypes = {\n  configs: PropTypes.object,\n};\n"],"sourceRoot":""}