<%#
 Copyright 2017 Xingwang Liao <kuoruan@gmail.com>
 Licensed to the public under the Apache License 2.0.
-%>

<%
	local dsp = require "luci.dispatcher"
	local request = dsp.context.path
	local leaf = request[#request]
-%>

<style title="text/css">
/* container for entire page. fixes bootstrap theme's ridiculously small page width */
.container {
	max-width: none;
	margin: 0 30px;
	width: auto;
}
/* column for configuration section name */
table th {
	padding: 5px 0;
	text-align: center;
	vertical-align: middle;
}
/* cells showing the configuration values */
table td {
	padding: 5px 0;
	text-align: center;
	vertical-align: middle;
}
/* sort buttons column */
table.cbi-section-table td.cbi-section-table-cell {
	text-align: center;
}
</style>

<%+cbi/map%>

<script type="text/javascript">//<![CDATA[
	function bpsToKbpsString(bps) {
		var kbps = '*';
		var bpsn = parseInt(bps) / 1000;
		if (isNaN(bpsn)) {
			kbps = '*';
		} else if (bpsn < 1) {
			kbps = bpsn.toFixed(1) + '';
		} else {
			kbps = bpsn.toFixed(0) + '';
		}
		return kbps;
	}
	(function(doc){
		var tbs = doc.getElementsByClassName('ld-<%=leaf%>');
		var lastTime = 0;
		var dataTable = [];
		var updateInProgress = false;

		XHR.poll(3, '<%=dsp.build_url("admin", "network", "qos_gargoyle", "load_data", leaf)%>',
			null, function(res) {
				if (res.readyState == 4 && tbs) {
					var timestamp = new Date().getTime();
					var timeDiff = timestamp - lastTime;
					lastTime = timestamp;

					if (updateInProgress) return;

					updateInProgress = true;
					var lines = res.responseText.match(/hfsc\s1:[0-9]{1,2}\s.+leaf.+\n.+Sent\s[0-9]+/g);

					if (lines) {
						for (var i = 0, len = lines.length; i < len; i++) {
							var line = lines[i];
							var idx = parseInt(line.match(/hfsc\s1:([0-9]+)/)[1]) - 2;
							var lastBytes;
							if (idx < tbs.length) {
								lastBytes = dataTable[idx];
								var newBytes = line.match(/Sent\s([0-9]+)/)[1];
								dataTable[idx] = newBytes;
								var bps = NaN;
								if (lastBytes) {
									var diffBytes = parseInt(newBytes) - parseInt(lastBytes);
									if (diffBytes <= 0) {
										bps = 0;
									} else {
										bps = diffBytes * 8000 / timeDiff;
									}
								}
								tbs[idx].innerText = bpsToKbpsString(bps);
							}
						}
					}
					updateInProgress = false;
				}
			}
		);
	}(document));
//]]></script>
