#!/bin/bash
#====================================================================================
#
# Function: Update OpenWrt kernel running in KVM (Amlogic s9xxx, Allwinner, Rockchip)
# Copyright (C) 2020-- https://github.com/unifreq/openwrt_packit
# Copyright (C) 2021-- https://github.com/ophub/luci-app-amlogic
#
# Kernel files: boot-*.tar.gz, modules-*.tar.gz
# Command: openwrt-kernel-kvm
#
#================================== Functions list ==================================
#
# error_msg          : Output error message
# init_var           : Initialize all variables
# check_kernel       : Check kernel files list
# update_kernel      : Update the kernel
#
#============================== Set default parameters ==============================
#
# Set kernel directory
kernel_path="/mnt/vda4"
#
#====================================================================================

# Encountered a serious error, abort the script execution
error_msg() {
    echo -e "[Error] ${1}"
    exit 1
}

init_var() {
    # Check dependencies
    [[ -n "$(which tar)" ]] || error_msg "Missing [ tar ] in OpenWrt firmware, unable to update kernel"

    # Find the partition where root is located
    ROOT_PTNAME="$(df / | tail -n1 | awk '{print $1}' | awk -F '/' '{print $3}')"
    [[ "${ROOT_PTNAME}" == "vda"* ]] || error_msg "Cannot find the partition corresponding to the root file system!"

    # Move kernel related files to the ${kernel_path} directory
    mv -f /tmp/upload/* ${kernel_path} 2>/dev/null && sync

    sync && echo ""
}

# Check kernel files list
check_kernel() {
    cd ${kernel_path}

    # Determine custom kernel filename
    kernel_boot="$(ls boot-*.tar.gz | head -n 1)"
    kernel_name="${kernel_boot/boot-/}" && kernel_name="${kernel_name/.tar.gz/}"
    KERNEL_VERSION="$(echo ${kernel_name} | grep -oE '^[1-9].[0-9]{1,3}.[0-9]+')"
    echo -e "Kernel name: ${kernel_name}"

    # Check the sha256sums file
    sha256sums_file="sha256sums"
    sha256sums_check="1"
    [[ -s "${sha256sums_file}" && -n "$(cat ${sha256sums_file})" ]] || sha256sums_check="0"
    [[ -n "$(which sha256sum)" ]] || sha256sums_check="0"
    [[ "${sha256sums_check}" -eq "1" ]] && echo -e "Enable sha256sum checking..."

    # Loop check file
    i="1"
    kernel_list=("boot" "modules")
    for kernel_file in ${kernel_list[*]}; do
        # Set check filename
        tmp_file="${kernel_file}-${kernel_name}.tar.gz"
        # Check if file exists
        [[ -s "${tmp_file}" ]] || error_msg "The [ ${kernel_file} ] file is missing."
        # Check if the file sha256sum is correct
        if [[ "${sha256sums_check}" -eq "1" ]]; then
            tmp_sha256sum="$(sha256sum "${tmp_file}" | awk '{print $1}')"
            tmp_checkcode="$(cat ${sha256sums_file} | grep ${tmp_file} | awk '{print $1}')"
            [[ "${tmp_sha256sum}" == "${tmp_checkcode}" ]] || error_msg "${tmp_file}: sha256sum verification failed."
            echo -e "(${i}/2) [ ${tmp_file} ] file sha256sum check same."
        fi
        let i++
    done

    sync && echo ""
}

# Update the kernel
update_kernel() {
    echo -e "Start unpacking the kernel..."

    # 01. for /boot five files
    rm -f /boot/config-* /boot/System.map-* /boot/initrd.img* /boot/vmlinuz* /boot/uInitrd* 2>/dev/null && sync
    #
    tar -xf ${kernel_path}/boot-${kernel_name}.tar.gz -C /boot && sync
    [[ "$(ls /boot/*${kernel_name}* -l 2>/dev/null | grep "^-" | wc -l)" -ge "4" ]] || error_msg "The /boot files is missing."
    (cd /boot && ln -sf initrd.img-${kernel_name} initrd.img && ln -s vmlinuz-${kernel_name} vmlinuz && rm -f uInitrd* && sync)
    echo -e "(1/2) Unpacking [ boot-${kernel_name}.tar.gz ] done."

    # 02. for /lib/modules/*
    rm -rf /lib/modules/* 2>/dev/null && sync
    tar -xf ${kernel_path}/modules-${kernel_name}.tar.gz -C /lib/modules && sync
    (
        cd /lib/modules/${kernel_name}
        rm -f *.ko 2>/dev/null
        find ./ -type f -name '*.ko' -exec ln -s {} ./ \;
        sync && sleep 3
        x="$(ls *.ko -l 2>/dev/null | grep "^l" | wc -l)"
        [[ "${x}" -eq "0" ]] && error_msg "The *.ko files not found."
    )
    echo -e "(2/2) Unpacking [ modules-${kernel_name}.tar.gz ] done."

    # Delete kernel tmpfiles
    rm -f ${kernel_path}/*.tar.gz ${kernel_path}/sha256sums 2>/dev/null

    # Update release file
    sed -i '/KERNEL_VERSION/d' /etc/flippy-openwrt-release 2>/dev/null
    echo "KERNEL_VERSION='${kernel_name}'" >>/etc/flippy-openwrt-release 2>/dev/null
    # Update banner file
    sed -i "s/ Kernel.*/ Kernel: ${kernel_name}/g" /etc/banner 2>/dev/null

    sync && echo ""
}

echo -e "Start updating OpenWrt kernel in kvm virtual machine..."
# Operation environment check
[[ -x "/usr/sbin/openwrt-kernel-kvm" ]] || error_msg "Please give execute permission: chmod +x /usr/sbin/openwrt-kernel-kvm"
#
# Initialize all variables
init_var "${@}"
# Check kernel files list
check_kernel
# Update the kernel
update_kernel
#
sync && sleep 3
echo "Successfully updated, automatic restarting..."
reboot
